import Mathlib.Tactic

open BigOperators

def f (n:ℕ) : Fin n → Nat := Fin.toNat

#eval @f 3 

def sum_n (n:ℕ) : ℕ := ∑ i:Fin n, (f n) i

theorem sum_n_eq_expr (n:ℕ) : sum_n n = n*(n+1)/2 := by 
  unfold sum_n
  unfold f
  induction n with
  | zero => rfl 
  | succ => sorry


#check Decidable.casesOn


example (X : Type) (n : ℕ) (f : Fin n → X) (x:X) : Fin (n+1) → X :=
  Fin.cons x f


example (X : Type) (n : ℕ) (f : Fin n → X) (x:X) : Fin (n+1) → X := by
  exact Fin.snoc f x


example (X : Type) (n : ℕ) (x:X) : Fin (n+1) → X := by
  exact Fin.snoc  x


--example : Fin 6 → ℕ := by

#eval  (Fin.cons (20:ℕ) (fun (x:Fin 5)=> x.toNat) : Fin 6 → ℕ)
#eval  (Fin.snoc (fun (x:Fin 5)=> x.toNat) (20:ℕ) : Fin 6 → ℕ)

